{"version":3,"sources":["Definitions.js","InputFunctions.js","App.js","reportWebVitals.js","index.js"],"names":["_amount","_classPrivateFieldLooseKey","_isPercentage","_contributeAmount","GoalUpdate","newAmount","_classCallCheck","this","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","_createClass","key","contribution","isValuePercentage","GoalUpdateComparator","a","b","Error","getGoal","getContribution","_amount2","_isAnnual","_usesPercentages","_goalUpdates","_goalName","FinancialGoal","push","maxGoalIdx","length","updateGoal","sort","goalIndex","splice","isAnnualGoal","usesPercentages","name","buttonInput","buttonID","buttonText","callbackFunction","arguments","undefined","React","createElement","onClick","createFinancialGoal","financialGoal","index","label","boxID","goalIdx","textID","getIndex","percentageID","Fragment","for","type","id","textInput","gFinancialGoals","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.0059139f.chunk.js","sourcesContent":["/**\r\n * A simple enum to define how often one is paid.\r\n */\r\nexport const PayFrequencies = {\r\n    Once:       \"once\",\r\n    Daily:      \"daily\",\r\n    Weekly:     \"weekly\",\r\n    Biweekly:   \"biweekly\",\r\n    Monthly:    \"monthly\",\r\n    Quarterly:  \"quarterly\",\r\n    Annually:   \"annually\"\r\n}\r\n\r\n/**\r\n * This is the Goal Update class, which defines whether \r\n */\r\nexport class GoalUpdate {\r\n    #amount;\r\n    #isPercentage = true;\r\n    #contributeAmount = 0;\r\n\r\n    constructor(newAmount) {\r\n        this.#amount = newAmount;\r\n    }\r\n\r\n    valueOf() {\r\n        return this.#amount;\r\n    }\r\n\r\n    // Getters\r\n    getGoal() {\r\n        return this.#amount;\r\n    }\r\n\r\n    getContribution() {\r\n        return this.#contributeAmount;\r\n    }\r\n\r\n    // Setters\r\n    updateGoal(newAmount) {\r\n        this.#amount = newAmount;\r\n    }\r\n\r\n    setContribution(contribution) {\r\n        this.#contributeAmount = contribution;\r\n    }\r\n\r\n    setPercentage(isValuePercentage) {\r\n        this.#isPercentage = isValuePercentage;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Comparator for two GoalUpdate items\r\n * \r\n * @param   {GoalUpdate} a The first GoalUpdate to be compared to\r\n * @param   {GoalUpdate} b The second GoalUpdate to compare to a\r\n * @returns Int to indicate whether they're equal, a should \r\n */\r\nexport function GoalUpdateComparator(a, b) {\r\n    // Ensure both of proper type\r\n    if (typeof a !== \"GoalUpdate\") {\r\n        throw new Error(\"ERROR: 'a' should of the type GoalUpdate!\")\r\n    }\r\n    if (typeof b !== \"GoalUpdate\") {\r\n        throw new Error(\"ERROR: 'b' should of the type GoalUpdate!\")\r\n    }\r\n\r\n    // If a amount is less than b amount, then a should come first (neg amount)\r\n    if (a.getGoal() < b.getGoal()) {\r\n        return -1;\r\n    }\r\n\r\n    // If b amount is less than a amount, then b should come first \r\n    if (b.getGoal() < a.getGoal()) {\r\n        return 1;\r\n    }\r\n\r\n    // If both are equal, then check percentages\r\n    if (a.getContribution() < b.getContribution()) {\r\n        return -1;\r\n    }\r\n\r\n    if (b.getContribution() < a.getContribution()) {\r\n        return 1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n/**\r\n * This is the class for the Financial Goals. They each contain a goal amount, a\r\n * definition of whether or not it is an annual goal, whether or not it uses\r\n * percentages to contribute, and an array of the individual goal levels.\r\n */\r\nexport class FinancialGoal {\r\n    // Variables\r\n    #amount;\r\n    #isAnnual = true;\r\n    #usesPercentages = true;\r\n    #goalUpdates = [];\r\n    #goalName = \"\";\r\n\r\n    // Constructor\r\n    constructor() {\r\n        this.#amount = 0;\r\n        this.#goalUpdates.push(new GoalUpdate(0))\r\n    }\r\n\r\n    // Getters\r\n    /**\r\n     * Get the total amount that this goal is working towards\r\n     * @returns Monetary goal amount\r\n     */\r\n    getGoal() {\r\n        return this.#amount;\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not this is an annual goal. If the goal is annual, then\r\n     * when calculations are happening, it should \"reset\" to 0 at the start of\r\n     * the year.\r\n     * @returns Boolean True if happens annually, false if once\r\n     */\r\n    getIsAnnual() {\r\n        return this.#isAnnual;\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not this uses a percentage of income - as opposed to raw\r\n     * monetary values - to contribute to the goal. An example might be that\r\n     * this would be True if someone is contributing 10% of their salary to a\r\n     * 401K, but False if someone is contributing $25/month to a rainy day fund.\r\n     * @returns Boolean True if uses percentage of income\r\n     */\r\n    getUsesPercentages() {\r\n        return this.#usesPercentages;\r\n    }\r\n\r\n    getName() {\r\n        return this.#goalName;\r\n    }\r\n\r\n    getIndex() {\r\n        return 0;\r\n    }\r\n\r\n    // Setters\r\n    /**\r\n     * Updates the total goal amount for this.\r\n     * @param {Integer} newAmount Updated amount for goal.\r\n     */\r\n    updateGoal(newAmount) {\r\n        this.#amount = newAmount;\r\n        let maxGoalIdx = this.#goalUpdates.length - 1;\r\n        this.#goalUpdates[maxGoalIdx].updateGoal(newAmount);\r\n    }\r\n\r\n    /**\r\n     * Add a new goal update level. These are defined as the levels at which\r\n     * one's goals will be met. For example, a $5,000 goal may have two levels,\r\n     * where one is contributing $250/month until $4,000 is reached, then only\r\n     * $100/month until the final value of $5,000 is reached.\r\n     */\r\n    addGoalUpdate() {\r\n        this.#goalUpdates.push(new GoalUpdate(0));\r\n        this.#goalUpdates.sort(GoalUpdateComparator);\r\n    }\r\n\r\n    /**\r\n     * Remove the specified goal update.\r\n     * @param {Integer} goalIndex Index to remove\r\n     */\r\n    removeGoalUpdate(goalIndex) {\r\n        this.#goalUpdates.splice(goalIndex, 1);\r\n    }\r\n\r\n    /**\r\n     * Define if this is an annual goal. An annual goal will reset on January 1,\r\n     * while a non-annual goal will continue, irregardless of date, until the\r\n     * final goal level is reached.\r\n     * @param {Boolean} isAnnualGoal \r\n     */\r\n    setAnnual(isAnnualGoal) {\r\n        this.#isAnnual = isAnnualGoal;\r\n    }\r\n\r\n    /**\r\n     * Define whether or not this goal uses percentages of income, as opposed to\r\n     * raw monetary amounts.\r\n     * @param {Boolean} usesPercentages \r\n     */\r\n    setUsesPercentages(usesPercentages) {\r\n        this.#usesPercentages = usesPercentages;\r\n    }\r\n\r\n    setName(name) {\r\n        this.#goalName = name;\r\n    }\r\n}\r\n\r\nexport class FinancialInput {\r\n    // Variables\r\n    #payFrequency = PayFrequencies.Biweekly;\r\n    #startDate;\r\n    #payAmount = 0;\r\n\r\n    // Constructor\r\n    constructor(startDate) {\r\n        this.#startDate = startDate;\r\n    }\r\n\r\n    // Getters\r\n    /**\r\n     * \r\n     * @returns startDate\r\n     */\r\n    getStartDate() {\r\n        return this.#startDate;\r\n    }\r\n\r\n    getPayAmount() {\r\n        return this.#payAmount;\r\n    }\r\n\r\n    getStartDate() {\r\n        return this.#startDate;\r\n    }\r\n\r\n    // Setters\r\n    /**\r\n     * Sets the frequency of pay\r\n     * @param {PayFrequencies} payFrequency \r\n     */\r\n    setPayFrequency(payFrequency) {\r\n        this.#payFrequency = payFrequency;\r\n    }\r\n\r\n    setPayAmount(payAmount) {\r\n        this.#payAmount = payAmount;\r\n    }\r\n\r\n    setStartDate(startDate) {\r\n        this.#startDate = startDate;\r\n    }\r\n}","import React, {Component, useState} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport {GoalUpdate, GoalUpdateComparator, FinancialGoal, FinancialInputs}\r\n    from './Definitions.js';\r\n\r\n//import \"react-datepicker/dist/react-datepicker-cssmodules.css\";\r\n\r\n// Basic Functions\r\n\r\n/**\r\n * dateInput creates a generic date input with the provided ID and text.\r\n * \r\n * @param {*} param0 \r\n * @returns \r\n */\r\nexport function dateInput(dateID, dateText) {\r\n    //dateID, dateText\r\n    // TODO : Create DateInput\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    return (\r\n        <>\r\n            <DatePicker\r\n                selected={startDate}\r\n                onChange={(date) => setStartDate(date)}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport function textInput(label, textID) {\r\n  return (\r\n    <>\r\n      <label for={textID}>{label}</label>\r\n      <input type=\"text\" id={textID} name={textID}/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function checkboxInput(label, boxID) {\r\n  return (\r\n    <>\r\n  +    <label for={boxID}>{label}</label>\r\n      <input type=\"checkbox\" id={boxID} name={boxID} />\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * buttonInput creates a generic button using the provided text and callback\r\n * function. The function callback allows for any sort of function to be called\r\n * using the onClick property of buttons.\r\n * \r\n * @param {*} param0 \r\n * @returns \r\n */\r\nexport function buttonInput(buttonID, buttonText, callbackFunction=null) {\r\n    return (\r\n        <button\r\n        buttonID={buttonID}\r\n        onClick={callbackFunction}\r\n        >\r\n        {buttonText}\r\n        </button>\r\n    );\r\n}\r\n\r\n// Project-Specific Functions\r\nexport function createFinancialGoal(financialGoal, index) {\r\n  let goalIdx = \"goal\"+index;\r\n  let textID = \"goal\"+financialGoal.getIndex();\r\n  let percentageID = \"goal\"+financialGoal.getIndex()+\"UsesPercentages\"\r\n  return (\r\n    <div>\r\n      {buttonInput(goalIdx, \"Update Goal\")}\r\n      {textInput(\"Amount:\", textID)}\r\n      {checkboxInput(\"Uses Percentages:\", percentageID)}\r\n    </div>\r\n  );\r\n}","//import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport {dateInput, buttonInput, createFinancialGoal} from './InputFunctions';\n//import { clickTest } from './ActionFunctions';\nimport {GoalUpdate, GoalUpdateComparator, FinancialGoal, FinancialInputs}\n    from './Definitions.js';\n\nlet gFinancialGoals = [];\n// gFinancialInputs = [];\n\n// function declareFinancialInputs() {\n//   gFinancialInputs.push(new FinancialInputs());\n//   // TODO : Create Accordion Element\n// }\n\n\nfunction declareFinancialGoals() {\n  gFinancialGoals.push(new FinancialGoal());\n  // TODO : Create Accordion Element\n  return (\n    <>{createFinancialGoal(gFinancialGoals[0], 0)}</>\n  );\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <dateInput />\n      {buttonInput(\"addGoal\", \"Add a new goal\")}\n      {declareFinancialGoals()}\n    </div>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}