{"version":3,"sources":["Definitions.js","App.js","reportWebVitals.js","index.js"],"names":["PayFrequencies","Once","Daily","Weekly","Biweekly","Monthly","Quarterly","Annually","FinancialGoal","_useState","useState","_useState2","_slicedToArray","goalValue","updateGoalValue","_useState3","_useState4","isAnnual","updateIsAnnual","_useState5","_useState6","usesPercentages","updateUsePercentages","_useState7","_useState8","name","setName","_useState9","_useState10","startValue","updateStartValue","React","createElement","TextField","value","label","onChange","e","target","margin","FormControlLabel","control","Checkbox","checked","OverallDateInput","_useState11","_useState12","startDate","setStartDate","_useState13","_useState14","endDate","setEndDate","_useState15","_useState16","firstPayday","setFirstPayday","_useState17","_useState18","payFrequency","setPayFrequency","DemoContainer","components","DatePicker","FormControl","Select","labelId","MenuItem","App","className","LocalizationProvider","dateAdapter","AdapterDayjs","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.97ec6ae4.chunk.js","sourcesContent":["import {TextField, Checkbox, FormControlLabel, MenuItem, Select, FormControl} from '@mui/material';\r\n// import {Checkbox} from '@mui/material/Checkbox';\r\nimport React, {useState} from 'react';\r\nimport { DatePicker } from '@mui/x-date-pickers';\r\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\r\nimport {\r\n    Unstable_NumberInput as NumberInput,\r\n    NumberInputProps,\r\n    numberInputClasses,\r\n  } from '@mui/base/Unstable_NumberInput';\r\n\r\n/**\r\n * A simple enum to define how often one is paid.\r\n */\r\nexport const PayFrequencies = {\r\n    Once:       \"once\",\r\n    Daily:      \"daily\",\r\n    Weekly:     \"weekly\",\r\n    Biweekly:   \"biweekly\",\r\n    Monthly:    \"monthly\",\r\n    Quarterly:  \"quarterly\",\r\n    Annually:   \"annually\"\r\n}\r\n\r\n\r\nexport function FinancialGoal() {\r\n    const [goalValue, updateGoalValue] = useState(0);\r\n    const [isAnnual, updateIsAnnual] = useState(true);\r\n    const [usesPercentages, updateUsePercentages] = useState(true);\r\n    const [name, setName] = useState(null);\r\n    const [startValue, updateStartValue] = useState(0);\r\n\r\n    return (\r\n        <div>\r\n            <TextField \r\n                value={name}\r\n                label=\"Goal\"\r\n                onChange={(e) => { \r\n                    setName(e.target.value); \r\n                }} \r\n                margin=\"normal\"\r\n            /><br/>\r\n            <TextField \r\n                value={goalValue} \r\n                label=\"Total goal amount\"\r\n                onChange={(e) => { \r\n                    updateGoalValue(e.target.value); \r\n                }} \r\n                margin=\"normal\"\r\n            /><br/>\r\n            <TextField \r\n                value={startValue} \r\n                label=\"Base value first time running goal\"\r\n                onChange={(e) => { \r\n                    updateStartValue(e.target.value); \r\n                }} \r\n                margin=\"normal\"\r\n            /><br/>\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={usesPercentages}\r\n                        onChange={(e) => {\r\n                            updateUsePercentages(e.target.checked);\r\n                        }}\r\n                    />}\r\n                label=\"Use Percentage of Income\"\r\n            />\r\n            <br/>\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={isAnnual}\r\n                        onChange={(e) => {\r\n                            updateIsAnnual(e.target.checked);\r\n                        }}\r\n                    />}\r\n                label=\"Is an annual goal; i.e. resets on Jan 1\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction PayFrequencyMenu() {\r\n    return (\r\n    <>\r\n    <MenuItem value={PayFrequencies.Once}>{PayFrequencies.Once}</MenuItem>\r\n    <MenuItem value={PayFrequencies.Daily}>{PayFrequencies.Daily}</MenuItem>\r\n    <MenuItem value={PayFrequencies.Weekly}>{PayFrequencies.Weekly}</MenuItem>\r\n    <MenuItem value={PayFrequencies.Biweekly}>{PayFrequencies.Biweekly}</MenuItem>\r\n    <MenuItem value={PayFrequencies.Monthly}>{PayFrequencies.Monthly}</MenuItem>\r\n    <MenuItem value={PayFrequencies.Quarterly}>{PayFrequencies.Quarterly}</MenuItem>\r\n    <MenuItem value={PayFrequencies.Annually}>{PayFrequencies.Annually}</MenuItem>\r\n    </>\r\n);\r\n    // return (\r\n    //     <>\r\n    //     <MenuItem value={PayFrequencies.Once}>{PayFrequencies.Once}</MenuItem>\r\n    //     <MenuItem value={PayFrequencies.Daily}>{PayFrequencies.Daily}</MenuItem>\r\n    //     <MenuItem value={PayFrequencies.Weekly}>{PayFrequencies.Weekly}</MenuItem>\r\n    //     <MenuItem value={PayFrequencies.Biweekly}>{PayFrequencies.Biweekly}</MenuItem>\r\n    //     <MenuItem value={PayFrequencies.Monthly}>{PayFrequencies.Monthly}</MenuItem>\r\n    //     <MenuItem value={PayFrequencies.Quarterly}>{PayFrequencies.Quarterly}</MenuItem>\r\n    //     <MenuItem value={PayFrequencies.Annually}>{PayFrequencies.Annually}</MenuItem>\r\n    //     </>\r\n    // );\r\n}\r\n\r\n/*\r\n<DatePicker value={startDate} onChange={(e) => {\r\n                setStartDate(e.target.value);}\r\n            } />\r\n            <DatePicker value={endDate} onChange={(e) => {\r\n                setEndDate(e.target.value);}\r\n            }/>\r\n            <DatePicker value={firstPayday} onChange={(e) => {\r\n                setFirstPayday(e.target.value);}\r\n            }/>\r\n            <Select\r\n                labelId=\"SalaryFrequency\"\r\n                label=\"Pay Frequency\"\r\n                value={payFrequency}\r\n                onChange={(e) => {\r\n                    setPayFrequency(e.target.value);}\r\n                }\r\n            >\r\n                <PayFrequencyMenu />\r\n            </Select>*/\r\n\r\nexport function OverallDateInput() {\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [firstPayday, setFirstPayday] = useState(null);\r\n    const [payFrequency, setPayFrequency] = useState(PayFrequencies.Biweekly);\r\n\r\n    return (\r\n        <div>\r\n            <DemoContainer components={['DatePicker']}>\r\n                <DatePicker\r\n                    value={startDate}\r\n                    onChange={(e) => {\r\n                        setStartDate(e);}\r\n                    }\r\n                />\r\n            </DemoContainer>\r\n            <DemoContainer components={['DatePicker']}>\r\n                <DatePicker\r\n                    value={endDate}\r\n                    onChange={(e) => {\r\n                        setEndDate(e);}\r\n                    }\r\n                />\r\n            </DemoContainer>\r\n            <DemoContainer components={['DatePicker']}>\r\n                <DatePicker\r\n                    value={firstPayday}\r\n                    onChange={(e) => {\r\n                        setFirstPayday(e);}\r\n                    }\r\n                />\r\n            </DemoContainer>\r\n        <FormControl>\r\n            <Select\r\n                labelId=\"SalaryFrequency\"\r\n                label=\"Pay Frequency\"\r\n                value={payFrequency}\r\n                onChange={(e) => {\r\n                    setPayFrequency(e.target.value);}\r\n                }\r\n            >\r\n                <MenuItem value={PayFrequencies.Once}>{PayFrequencies.Once}</MenuItem>\r\n                <MenuItem value={PayFrequencies.Daily}>{PayFrequencies.Daily}</MenuItem>\r\n                <MenuItem value={PayFrequencies.Weekly}>{PayFrequencies.Weekly}</MenuItem>\r\n                <MenuItem value={PayFrequencies.Biweekly}>{PayFrequencies.Biweekly}</MenuItem>\r\n                <MenuItem value={PayFrequencies.Monthly}>{PayFrequencies.Monthly}</MenuItem>\r\n                <MenuItem value={PayFrequencies.Quarterly}>{PayFrequencies.Quarterly}</MenuItem>\r\n                <MenuItem value={PayFrequencies.Annually}>{PayFrequencies.Annually}</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n        </div>\r\n    );\r\n}\r\n// export class FinancialInput {\r\n//     // Variables\r\n//     #payFrequency = PayFrequencies.Biweekly;\r\n//     #startDate;\r\n//     #payAmount = 0;\r\n\r\n//     // Constructor\r\n//     constructor(startDate) {\r\n//         this.#startDate = startDate;\r\n//     }\r\n\r\n//     // Getters\r\n//     /**\r\n//      * \r\n//      * @returns startDate\r\n//      */\r\n//     getStartDate() {\r\n//         return this.#startDate;\r\n//     }\r\n\r\n//     getPayAmount() {\r\n//         return this.#payAmount;\r\n//     }\r\n\r\n//     // Setters\r\n//     /**\r\n//      * Sets the frequency of pay\r\n//      * @param {PayFrequencies} payFrequency \r\n//      */\r\n//     setPayFrequency(payFrequency) {\r\n//         this.#payFrequency = payFrequency;\r\n//     }\r\n\r\n//     setPayAmount(payAmount) {\r\n//         this.#payAmount = payAmount;\r\n//     }\r\n\r\n//     setStartDate(startDate) {\r\n//         this.#startDate = startDate;\r\n//     }\r\n// }","//import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n// import {dateInput, buttonInput, createFinancialGoal} from './InputFunctions';\n// //import { clickTest } from './ActionFunctions';\n// import {GoalUpdate, GoalUpdateComparator, FinancialGoal, FinancialInputs}\n//     from './Definitions.js';\n// import {GoalCreation} from './GoalDesign';\nimport {OverallDateInput, FinancialGoal} from './Definitions.js';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\n\n// let gFinancialGoals = [];\n// gFinancialInputs = [];\n\n// function declareFinancialInputs() {\n//   gFinancialInputs.push(new FinancialInputs());\n//   // TODO : Create Accordion Element\n// }\n\n\n// function DeclareFinancialGoals() {\n//   let startGoal = new FinancialGoal();\n//   gFinancialGoals.push(startGoal);\n//   startGoal.setStartingAmount(100);\n//   console.log(gFinancialGoals);\n//   // TODO : Create Accordion Element\n//   return (\n//     <div>\n//       <GoalCreation goal={gFinancialGoals[0]} />\n//     </div>\n//   );\n// }\n    //   {/* {buttonInput(\"addGoal\", \"Add a new goal\")} */}\n    //   {/* {declareFinancialGoals()} */}\n    //   <DeclareFinancialGoals />\n\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <OverallDateInput />\n      <FinancialGoal />\n    </LocalizationProvider>\n    </div>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}